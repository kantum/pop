!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1e2c63f/
${OBJECTDIR}/FAT32.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/FAT32.o: FAT32.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/SD.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/SD.o: SD.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/SPI.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/SPI.o: SPI.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/UART.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/UART.o: UART.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/UI.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/UI.o: UI.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/configbits.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/configbits.o: configbits.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/convert.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/convert.o: convert.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/delay.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/delay.o: delay.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/led.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/led.o: led.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/list.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/list.o: list.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/main.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/main.o: main.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/piezo.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/piezo.o: piezo.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/screen.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/screen.o: screen.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/settings.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/settings.o: settings.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/shiftreg.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/shiftreg.o: shiftreg.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/wheel.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/wheel.o: wheel.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
${OBJECTDIR}/wifi.o	nbproject/Makefile-default.mk	/^${OBJECTDIR}\/wifi.o: wifi.c  nbproject\/Makefile-${CND_CONF}.mk$/;"	t
.all-impl	nbproject/Makefile-impl.mk	/^.all-impl: .all-pre .depcheck-impl$/;"	t
.all-post	Makefile	/^.all-post: .all-impl$/;"	t
.all-pre	Makefile	/^.all-pre:$/;"	t
.build-conf	nbproject/Makefile-default.mk	/^.build-conf:  ${BUILD_SUBPROJECTS}$/;"	t
.build-impl	nbproject/Makefile-impl.mk	/^.build-impl: .build-pre$/;"	t
.build-post	Makefile	/^.build-post: .build-impl$/;"	t
.build-pre	Makefile	/^.build-pre:$/;"	t
.build-subprojects	nbproject/Makefile-default.mk	/^.build-subprojects:$/;"	t
.clean-conf	nbproject/Makefile-default.mk	/^.clean-conf: ${CLEAN_SUBPROJECTS}$/;"	t
.clean-impl	nbproject/Makefile-impl.mk	/^.clean-impl: .clean-pre$/;"	t
.clean-post	Makefile	/^.clean-post: .clean-impl$/;"	t
.clean-pre	Makefile	/^.clean-pre:$/;"	t
.clean-subprojects	nbproject/Makefile-default.mk	/^.clean-subprojects:$/;"	t
.clobber-impl	nbproject/Makefile-impl.mk	/^.clobber-impl: .clobber-pre .depcheck-impl$/;"	t
.clobber-post	Makefile	/^.clobber-post: .clobber-impl$/;"	t
.clobber-pre	Makefile	/^.clobber-pre:$/;"	t
.dep.inc	nbproject/Makefile-default.mk	/^.dep.inc: .depcheck-impl$/;"	t
.depcheck-impl	nbproject/Makefile-impl.mk	/^.depcheck-impl:$/;"	t
.help-post	Makefile	/^.help-post: .help-impl$/;"	t
.help-pre	Makefile	/^.help-pre:$/;"	t
ACMD13	SD.h	/^#define ACMD13	/;"	d
ACMD22	SD.h	/^#define ACMD22	/;"	d
ACMD23	SD.h	/^#define ACMD23	/;"	d
ACMD41	SD.h	/^#define ACMD41	/;"	d
ACMD42	SD.h	/^#define ACMD42	/;"	d
ACMD51	SD.h	/^#define ACMD51 /;"	d
ALLCONFS	nbproject/Makefile-impl.mk	/^ALLCONFS=default $/;"	m
ASFLAGS	nbproject/Makefile-default.mk	/^ASFLAGS=$/;"	m
BLACK	screen.h	/^#define	BLACK	/;"	d
BUILD_SUBPROJECTS	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS=${BUILD_SUBPROJECTS_${SUBPROJECTS}}$/;"	m
BUILD_SUBPROJECTS_	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS_=.build-subprojects$/;"	m
BUILD_SUBPROJECTS_NO	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS_NO=$/;"	m
CCADMIN	Makefile	/^CCADMIN=CCadmin$/;"	m
CFLAGS	nbproject/Makefile-default.mk	/^CFLAGS=$/;"	m
CLEAN_SUBPROJECTS	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS=${CLEAN_SUBPROJECTS_${SUBPROJECTS}}$/;"	m
CLEAN_SUBPROJECTS_	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS_=.clean-subprojects$/;"	m
CLEAN_SUBPROJECTS_NO	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS_NO=$/;"	m
CMD0	SD.h	/^#define CMD0	/;"	d
CMD1	SD.h	/^#define CMD1	/;"	d
CMD10	SD.h	/^#define CMD10	/;"	d
CMD12	SD.h	/^#define CMD12	/;"	d
CMD13	SD.h	/^#define CMD13	/;"	d
CMD16	SD.h	/^#define CMD16	/;"	d
CMD17	SD.h	/^#define CMD17	/;"	d
CMD18	SD.h	/^#define CMD18	/;"	d
CMD24	SD.h	/^#define CMD24	/;"	d
CMD25	SD.h	/^#define CMD25	/;"	d
CMD27	SD.h	/^#define CMD27	/;"	d
CMD28	SD.h	/^#define CMD28	/;"	d
CMD29	SD.h	/^#define CMD29	/;"	d
CMD30	SD.h	/^#define CMD30	/;"	d
CMD32	SD.h	/^#define CMD32	/;"	d
CMD33	SD.h	/^#define CMD33	/;"	d
CMD38	SD.h	/^#define CMD38	/;"	d
CMD42	SD.h	/^#define CMD42	/;"	d
CMD55	SD.h	/^#define CMD55	/;"	d
CMD56	SD.h	/^#define CMD56	/;"	d
CMD58	SD.h	/^#define CMD58	/;"	d
CMD59	SD.h	/^#define CMD59	/;"	d
CMD6	SD.h	/^#define CMD6	/;"	d
CMD8	SD.h	/^#define CMD8	/;"	d
CMD9	SD.h	/^#define CMD9	/;"	d
CND_ARTIFACT_DIR_default	nbproject/Makefile-variables.mk	/^CND_ARTIFACT_DIR_default=dist\/default\/production$/;"	m
CND_ARTIFACT_NAME_default	nbproject/Makefile-variables.mk	/^CND_ARTIFACT_NAME_default=pop.X.production.hex$/;"	m
CND_ARTIFACT_PATH_default	nbproject/Makefile-variables.mk	/^CND_ARTIFACT_PATH_default=dist\/default\/production\/pop.X.production.hex$/;"	m
CND_BASEDIR	nbproject/Makefile-variables.mk	/^CND_BASEDIR=`pwd`$/;"	m
CND_CONF	nbproject/Makefile-default.mk	/^CND_CONF=default$/;"	m
CND_PACKAGE_DIR_default	nbproject/Makefile-variables.mk	/^CND_PACKAGE_DIR_default=${CND_DISTDIR}\/default\/package$/;"	m
CND_PACKAGE_NAME_default	nbproject/Makefile-variables.mk	/^CND_PACKAGE_NAME_default=pop.x.tar$/;"	m
CND_PACKAGE_PATH_default	nbproject/Makefile-variables.mk	/^CND_PACKAGE_PATH_default=${CND_DISTDIR}\/default\/package\/pop.x.tar$/;"	m
COMMAND	screen.h	/^#define COMMAND /;"	d
COMPARISON_BUILD	nbproject/Makefile-default.mk	/^COMPARISON_BUILD=$/;"	m
COMPARISON_BUILD	nbproject/Makefile-default.mk	/^COMPARISON_BUILD=-mafrlcsj$/;"	m
CONF	nbproject/Makefile-impl.mk	/^CONF=${DEFAULTCONF}$/;"	m
CONTRAST	screen.h	/^#define	CONTRAST	/;"	d
CONVERT_H	convert.h	/^#define	CONVERT_H$/;"	d
CP	Makefile	/^CP=cp$/;"	m
CP	nbproject/Makefile-default.mk	/^CP=cp $/;"	m
CR	wifi.h	/^#define CR	/;"	d
DATA	screen.h	/^#define DATA	/;"	d
DEBUGGABLE_SUFFIX	nbproject/Makefile-default.mk	/^DEBUGGABLE_SUFFIX=elf$/;"	m
DEFAULTCONF	nbproject/Makefile-impl.mk	/^DEFAULTCONF=default$/;"	m
DELAY_H	delay.h	/^#define	DELAY_H$/;"	d
DEPFILES	nbproject/Makefile-default.mk	/^DEPFILES=$(shell "${PATH_TO_IDE_BIN}"mplabwildcard ${POSSIBLE_DEPFILES})$/;"	m
DEP_GEN	nbproject/Makefile-local-default.mk	/^DEP_GEN=${MP_JAVA_PATH}java -jar "\/Applications\/microchip\/mplabx\/v4.20\/mplab_platform\/plat/;"	m
DISTDIR	nbproject/Makefile-default.mk	/^DISTDIR=dist\/${CND_CONF}\/${IMAGE_TYPE}$/;"	m
DOWN	types.h	/^#define DOWN	/;"	d
FALLING_EDGE	types.h	/^#define FALLING_EDGE	/;"	d
FAT32_BUFFER	FAT32.h	/^byte            FAT32_BUFFER[512];$/;"	v	typeref:typename:byte[512]
FAT32_Data_sector	FAT32.c	/^unsigned int	FAT32_Data_sector = 0;$/;"	v	typeref:typename:unsigned int
FAT32_End_of_Chain	FAT32.c	/^unsigned int	FAT32_End_of_Chain = 0;$/;"	v	typeref:typename:unsigned int
FAT32_FAT_Size	FAT32.c	/^unsigned int	FAT32_FAT_Size = 0;$/;"	v	typeref:typename:unsigned int
FAT32_FAT_sector	FAT32.c	/^unsigned int	FAT32_FAT_sector = 0;$/;"	v	typeref:typename:unsigned int
FAT32_H	FAT32.h	/^#define	FAT32_H$/;"	d
FAT32_MBR_sector	FAT32.c	/^unsigned int	FAT32_MBR_sector = 0;		\/\/ Sector of the 1st partition$/;"	v	typeref:typename:unsigned int
FAT32_Number_of_FATs	FAT32.c	/^byte			FAT32_Number_of_FATs = 0;$/;"	v	typeref:typename:byte
FAT32_ROOT_DIRECTORY	FAT32.h	/^file_t			FAT32_ROOT_DIRECTORY;$/;"	v	typeref:typename:file_t
FAT32_Reserved_Sectors	FAT32.c	/^unsigned short	FAT32_Reserved_Sectors = 0;$/;"	v	typeref:typename:unsigned short
FAT32_Sectors_per_Cluster	FAT32.c	/^byte			FAT32_Sectors_per_Cluster = 0;$/;"	v	typeref:typename:byte
FAT32_cluster_to_sector	FAT32.c	/^unsigned int	FAT32_cluster_to_sector(unsigned int cluster)$/;"	f	typeref:typename:unsigned int
FAT32_fgetb	FAT32.c	/^bool			FAT32_fgetb(file_t *file, char *b)$/;"	f	typeref:typename:bool
FAT32_fgetc	FAT32.c	/^bool			FAT32_fgetc(file_t *file, char *c)$/;"	f	typeref:typename:bool
FAT32_filename_matches	FAT32.c	/^bool			FAT32_filename_matches(file_t directory_cluster, char *filename)$/;"	f	typeref:typename:bool
FAT32_fopen	FAT32.c	/^bool			FAT32_fopen(file_t directory_cluster, char *filename, file_t *file)$/;"	f	typeref:typename:bool
FAT32_fpos	FAT32.c	/^unsigned int	FAT32_fpos(file_t *file)$/;"	f	typeref:typename:unsigned int
FAT32_fputlb	FAT32.c	/^bool			FAT32_fputlb(file_t *file, char *b)$/;"	f	typeref:typename:bool
FAT32_fseek	FAT32.c	/^bool			FAT32_fseek(file_t *file, unsigned int position)$/;"	f	typeref:typename:bool
FAT32_fsize	FAT32.c	/^unsigned int	FAT32_fsize(file_t *file)$/;"	f	typeref:typename:unsigned int
FAT32_is_mounted	FAT32.c	/^unsigned int	FAT32_is_mounted = false;$/;"	v	typeref:typename:unsigned int
FAT32_mount	FAT32.c	/^bool FAT32_mount(void)$/;"	f	typeref:typename:bool
FAT32_mounted	FAT32.c	/^bool			FAT32_mounted(void)$/;"	f	typeref:typename:bool
FAT32_setup_file	FAT32.c	/^void			FAT32_setup_file(file_t directory, file_t *file)$/;"	f	typeref:typename:void
FINAL_IMAGE	nbproject/Makefile-default.mk	/^FINAL_IMAGE=dist\/${CND_CONF}\/${IMAGE_TYPE}\/pop.X.${IMAGE_TYPE}.${OUTPUT_SUFFIX}$/;"	m
FIXDEPS	nbproject/Makefile-default.mk	/^FIXDEPS=fixDeps$/;"	m
GRACE_BYTES	SD.h	/^#define GRACE_BYTES /;"	d
HIGH	types.h	/^#define HIGH /;"	d
IMAGE_TYPE	nbproject/Makefile-default.mk	/^IMAGE_TYPE=debug$/;"	m
IMAGE_TYPE	nbproject/Makefile-default.mk	/^IMAGE_TYPE=production$/;"	m
INPUT	types.h	/^#define INPUT /;"	d
LDLIBSOPTIONS	nbproject/Makefile-default.mk	/^LDLIBSOPTIONS=$/;"	m
LED_AQUA	led.h	/^#define LED_AQUA /;"	d
LED_BLUE	led.h	/^#define LED_BLUE /;"	d
LED_B_LAT	led.h	/^#define LED_B_LAT /;"	d
LED_B_TRIS	led.h	/^#define LED_B_TRIS /;"	d
LED_GREEN	led.h	/^#define LED_GREEN /;"	d
LED_G_LAT	led.h	/^#define LED_G_LAT /;"	d
LED_G_TRIS	led.h	/^#define LED_G_TRIS /;"	d
LED_H	led.h	/^#define	LED_H$/;"	d
LED_OFF	led.h	/^#define LED_OFF /;"	d
LED_PURPLE	led.h	/^#define LED_PURPLE /;"	d
LED_RED	led.h	/^#define LED_RED /;"	d
LED_R_LAT	led.h	/^#define LED_R_LAT /;"	d
LED_R_TRIS	led.h	/^#define LED_R_TRIS /;"	d
LED_WHITE	led.h	/^#define LED_WHITE /;"	d
LED_YELLOW	led.h	/^#define LED_YELLOW /;"	d
LIST_H	list.h	/^#define LIST_H$/;"	d
LOW	types.h	/^#define LOW /;"	d
MKDIR	Makefile	/^MKDIR=mkdir$/;"	m
MKDIR	nbproject/Makefile-default.mk	/^MKDIR=mkdir -p$/;"	m
MP_AR	nbproject/Makefile-local-default.mk	/^MP_AR="\/Applications\/microchip\/xc32\/v2.10\/bin\/xc32-ar"$/;"	m
MP_AR_DIR	nbproject/Makefile-local-default.mk	/^MP_AR_DIR="\/Applications\/microchip\/xc32\/v2.10\/bin"$/;"	m
MP_AS	nbproject/Makefile-local-default.mk	/^MP_AS="\/Applications\/microchip\/xc32\/v2.10\/bin\/xc32-as"$/;"	m
MP_AS_DIR	nbproject/Makefile-local-default.mk	/^MP_AS_DIR="\/Applications\/microchip\/xc32\/v2.10\/bin"$/;"	m
MP_CC	nbproject/Makefile-local-default.mk	/^MP_CC="\/Applications\/microchip\/xc32\/v2.10\/bin\/xc32-gcc"$/;"	m
MP_CC_DIR	nbproject/Makefile-local-default.mk	/^MP_CC_DIR="\/Applications\/microchip\/xc32\/v2.10\/bin"$/;"	m
MP_CPPC	nbproject/Makefile-local-default.mk	/^MP_CPPC="\/Applications\/microchip\/xc32\/v2.10\/bin\/xc32-g++"$/;"	m
MP_CPPC_DIR	nbproject/Makefile-local-default.mk	/^MP_CPPC_DIR="\/Applications\/microchip\/xc32\/v2.10\/bin"$/;"	m
MP_JAVA_PATH	nbproject/Makefile-local-default.mk	/^MP_JAVA_PATH="\/Applications\/microchip\/mplabx\/v4.20\/sys\/java\/jre1.8.0_144.jre\/Contents\/H/;"	m
MP_LD	nbproject/Makefile-local-default.mk	/^MP_LD="\/Applications\/microchip\/xc32\/v2.10\/bin\/xc32-ld"$/;"	m
MP_LD_DIR	nbproject/Makefile-local-default.mk	/^MP_LD_DIR="\/Applications\/microchip\/xc32\/v2.10\/bin"$/;"	m
MP_LINKER_FILE_OPTION	nbproject/Makefile-default.mk	/^MP_LINKER_FILE_OPTION=$/;"	m
MP_PROCESSOR_OPTION	nbproject/Makefile-default.mk	/^MP_PROCESSOR_OPTION=32MX340F512H$/;"	m
MV	nbproject/Makefile-default.mk	/^MV=mv $/;"	m
NL	wifi.h	/^#define NL	/;"	d
OBJECTDIR	nbproject/Makefile-default.mk	/^OBJECTDIR=build\/${CND_CONF}\/${IMAGE_TYPE}$/;"	m
OBJECTFILES	nbproject/Makefile-default.mk	/^OBJECTFILES=${OBJECTDIR}\/main.o ${OBJECTDIR}\/FAT32.o ${OBJECTDIR}\/SD.o ${OBJECTDIR}\/SPI.o ${/;"	m
OBJECTFILES_QUOTED_IF_SPACED	nbproject/Makefile-default.mk	/^OBJECTFILES_QUOTED_IF_SPACED=${OBJECTDIR}\/main.o ${OBJECTDIR}\/FAT32.o ${OBJECTDIR}\/SD.o ${OBJ/;"	m
OLED_CHAR_BOTTOM	screen.h	/^#define OLED_CHAR_BOTTOM /;"	d
OLED_CHAR_TOP	screen.h	/^#define OLED_CHAR_TOP /;"	d
OLED_D_C_LAT	screen.h	/^#define OLED_D_C_LAT /;"	d
OLED_D_C_TRIS	screen.h	/^#define OLED_D_C_TRIS /;"	d
OLED_FONT_DOUBLE	screen.h	/^#define OLED_FONT_DOUBLE /;"	d
OLED_FONT_NORMAL	screen.h	/^#define OLED_FONT_NORMAL /;"	d
OLED_RES_LAT	screen.h	/^#define OLED_RES_LAT /;"	d
OLED_RES_TRIS	screen.h	/^#define OLED_RES_TRIS /;"	d
OLED_SPI	screen.h	/^#define OLED_SPI(/;"	d
OLED_VCC_LAT	screen.h	/^#define OLED_VCC_LAT /;"	d
OLED_VCC_TRIS	screen.h	/^#define OLED_VCC_TRIS /;"	d
OLED_buffer	screen.h	/^static char OLED_buffer[128 * 32 \/ 8] = { \/\/Perpopulated with the Microchip logo$/;"	v	typeref:typename:char[]
OLED_characters1	screen.h	/^static const unsigned char OLED_characters1[] = {$/;"	v	typeref:typename:const unsigned char[]
OLED_characters2	screen.h	/^const unsigned char OLED_characters2[] =$/;"	v	typeref:typename:const unsigned char[]
OLED_extend_char	screen.c	/^byte OLED_extend_char(byte b, byte mask)$/;"	f	typeref:typename:byte
OLED_fill	screen.c	/^void	OLED_fill(uint8_t color)$/;"	f	typeref:typename:void
OLED_img1	screen.h	/^static const unsigned char OLED_img1[] = {$/;"	v	typeref:typename:const unsigned char[]
OLED_init	screen.c	/^void	OLED_init(void)$/;"	f	typeref:typename:void
OLED_putstr	screen.c	/^void	OLED_putstr(uint8_t *str, byte font, uint8_t offset)$/;"	f	typeref:typename:void
OLED_putstr_init	screen.c	/^void	OLED_putstr_init(void)$/;"	f	typeref:typename:void
OLED_sleep	screen.c	/^void	OLED_sleep(void)$/;"	f	typeref:typename:void
OLED_wake	screen.c	/^void	OLED_wake(void)$/;"	f	typeref:typename:void
OS_CURRENT	nbproject/Makefile-local-default.mk	/^OS_CURRENT="$(shell uname -s)"$/;"	m
OUTPUT	types.h	/^#define OUTPUT /;"	d
OUTPUT_SUFFIX	nbproject/Makefile-default.mk	/^OUTPUT_SUFFIX=elf$/;"	m
OUTPUT_SUFFIX	nbproject/Makefile-default.mk	/^OUTPUT_SUFFIX=hex$/;"	m
PATH	nbproject/Makefile-local-default.mk	/^PATH:=\/Applications\/microchip\/mplabx\/v4.20\/mplab_platform\/platform\/..\/mplab_ide\/modules/;"	m
PATH_TO_IDE_BIN	nbproject/Makefile-local-default.mk	/^PATH_TO_IDE_BIN=\/Applications\/microchip\/mplabx\/v4.20\/mplab_platform\/platform\/..\/mplab_id/;"	m
PIN_A	shiftreg.h	/^#define PIN_A	/;"	d
PIN_B	shiftreg.h	/^#define PIN_B	/;"	d
PIN_C	shiftreg.h	/^#define PIN_C	/;"	d
PIN_D	shiftreg.h	/^#define PIN_D	/;"	d
PIN_E	shiftreg.h	/^#define PIN_E	/;"	d
PIN_F	shiftreg.h	/^#define PIN_F	/;"	d
PIN_G	shiftreg.h	/^#define PIN_G	/;"	d
PIN_H	shiftreg.h	/^#define PIN_H	/;"	d
PIN_OLED_13V	shiftreg.h	/^#define PIN_OLED_13V	/;"	d
PIN_OLED_DC	shiftreg.h	/^#define PIN_OLED_DC	/;"	d
PIN_OLED_RST	shiftreg.h	/^#define PIN_OLED_RST	/;"	d
PIN_OLED_SS	shiftreg.h	/^#define PIN_OLED_SS	/;"	d
PIN_PHOTODIODE	shiftreg.h	/^#define PIN_PHOTODIODE	/;"	d
PIN_SD_SS	shiftreg.h	/^#define PIN_SD_SS	/;"	d
PIN_WIFI_EN	shiftreg.h	/^#define PIN_WIFI_EN	/;"	d
PIN_WIFI_RST	shiftreg.h	/^#define PIN_WIFI_RST	/;"	d
POSSIBLE_DEPFILES	nbproject/Makefile-default.mk	/^POSSIBLE_DEPFILES=${OBJECTDIR}\/main.o.d ${OBJECTDIR}\/FAT32.o.d ${OBJECTDIR}\/SD.o.d ${OBJECTDI/;"	m
PROJECTNAME	nbproject/Makefile-impl.mk	/^PROJECTNAME=pop.X$/;"	m
PR_MS	delay.c	/^#define PR_MS	/;"	d	file:
PR_US	delay.c	/^#define PR_US	/;"	d	file:
R1	SD.h	/^#define R1 /;"	d
R1b	SD.h	/^#define R1b	/;"	d
R2	SD.h	/^#define R2	/;"	d
R3	SD.h	/^#define R3	/;"	d
R7	SD.h	/^#define R7	/;"	d
RANLIB	Makefile	/^RANLIB=ranlib$/;"	m
RISING_EDGE	types.h	/^#define RISING_EDGE	/;"	d
RM	nbproject/Makefile-default.mk	/^RM=rm -f $/;"	m
SCREEN_H	screen.h	/^#define	SCREEN_H$/;"	d
SCROLL_DOWN	UI.h	/^#define SCROLL_DOWN /;"	d
SCROLL_RST	UI.h	/^#define SCROLL_RST /;"	d
SCROLL_UP	UI.h	/^#define SCROLL_UP /;"	d
SD_H	SD.h	/^#define	SD_H$/;"	d
SD_current_sector	SD.c	/^unsigned long SD_current_sector = 0; \/\/ The address of the sector on buffer$/;"	v	typeref:typename:unsigned long
SD_good_sector	SD.c	/^bool          SD_good_sector = false; \/\/ If the sector on buffer is good$/;"	v	typeref:typename:bool
SD_init	SD.c	/^bool SD_init(void)$/;"	f	typeref:typename:bool
SD_initialized	SD.c	/^bool SD_initialized(void)$/;"	f	typeref:typename:bool
SD_is_SDHC	SD.c	/^bool SD_is_SDHC        = false; \/\/ If the SD card is SDHC (High Capacity SD)$/;"	v	typeref:typename:bool
SD_is_initialized	SD.c	/^bool SD_is_initialized = false; \/\/ If the SD card has been initialized via$/;"	v	typeref:typename:bool
SD_read_block	SD.c	/^bool SD_read_block(unsigned int sector, byte* b)$/;"	f	typeref:typename:bool
SD_read_byte	SD.c	/^bool SD_read_byte(unsigned int sector, unsigned int relative_address, byte* b)$/;"	f	typeref:typename:bool
SD_read_bytes	SD.c	/^bool SD_read_bytes($/;"	f	typeref:typename:bool
SD_read_sector	SD.c	/^static bool SD_read_sector(unsigned int sector)$/;"	f	typeref:typename:bool	file:
SD_sector_buffer	SD.c	/^byte          SD_sector_buffer[512 + GRACE_BYTES]; \/\/ The buffer of the sector$/;"	v	typeref:typename:byte[]
SD_sector_pad	SD.c	/^byte          SD_sector_pad  = 0;     \/\/ The padding for the sector on buffer$/;"	v	typeref:typename:byte
SD_send_command	SD.c	/^static void SD_send_command($/;"	f	typeref:typename:void	file:
SD_write_sector	SD.c	/^bool SD_write_sector(unsigned int sector, char* buffer)$/;"	f	typeref:typename:bool
SETTINGS_H	settings.h	/^#define	SETTINGS_H$/;"	d
SHIFTREG_H	shiftreg.h	/^#define	SHIFTREG_H$/;"	d
SOURCEFILES	nbproject/Makefile-default.mk	/^SOURCEFILES=main.c FAT32.c SD.c SPI.c configbits.c shiftreg.c wheel.c led.c screen.c delay.c pie/;"	m
SOURCEFILES_QUOTED_IF_SPACED	nbproject/Makefile-default.mk	/^SOURCEFILES_QUOTED_IF_SPACED=main.c FAT32.c SD.c SPI.c configbits.c shiftreg.c wheel.c led.c scr/;"	m
SPI_BUFF_SIZE	SPI.h	/^#define SPI_BUFF_SIZE	/;"	d
SPI_H	SPI.h	/^#define	SPI_H$/;"	d
SPI_NONE	SPI.h	/^#define SPI_NONE /;"	d
SPI_OLED	SPI.h	/^#define SPI_OLED /;"	d
SPI_RX	SPI.h	/^byte	SPI_RX[SPI_BUFF_SIZE];			\/\/ Incoming SPI data buffer$/;"	v	typeref:typename:byte[]
SPI_RX_i	SPI.h	/^size_t	SPI_RX_i = 0;					\/\/ Internal index for the Incoming SPI data buffer$/;"	v	typeref:typename:size_t
SPI_RX_size	SPI.h	/^size_t	SPI_RX_size = 0;				\/\/ Allocated bytes in the Outgoing SPI data buffer$/;"	v	typeref:typename:size_t
SPI_SD	SPI.h	/^#define SPI_SD /;"	d
SPI_SS_LAT_SD	SPI.h	/^#define SPI_SS_LAT_SD /;"	d
SPI_SS_SD_LAT	SD.h	/^#define SPI_SS_SD_LAT	/;"	d
SPI_SS_SD_TRIS	SD.h	/^#define SPI_SS_SD_TRIS	/;"	d
SPI_SS_TRIS_SD	SPI.h	/^#define SPI_SS_TRIS_SD /;"	d
SPI_TX	SPI.h	/^byte	SPI_TX[SPI_BUFF_SIZE];			\/\/ Outgoing SPI data buffer$/;"	v	typeref:typename:byte[]
SPI_TX_discard	SPI.h	/^bool	SPI_TX_discard[SPI_BUFF_SIZE];	\/\/ Mark if the response from the byte has to be saved$/;"	v	typeref:typename:bool[]
SPI_TX_i	SPI.h	/^size_t	SPI_TX_i = 0;					\/\/ Internal index for the Outgoing SPI data buffer$/;"	v	typeref:typename:size_t
SPI_TX_size	SPI.h	/^size_t	SPI_TX_size = 0;				\/\/ Allocated bytes in the Outgoing SPI data buffer$/;"	v	typeref:typename:size_t
SPI_align_bits	SPI.c	/^byte	SPI_align_bits(size_t displacement, byte b1, byte b2) {$/;"	f	typeref:typename:byte
SPI_available	SPI.c	/^bool	SPI_available(void) {$/;"	f	typeref:typename:bool
SPI_get_byte	SPI.c	/^bool	SPI_get_byte(byte *b)$/;"	f	typeref:typename:bool
SPI_get_response	SPI.c	/^bool	SPI_get_response(size_t response_size, size_t wait_bytes, byte dummy, bool sleeping_bit, by/;"	f	typeref:typename:bool
SPI_init	SPI.c	/^void	SPI_init(void)$/;"	f	typeref:typename:void
SPI_initialized	SPI.c	/^bool SPI_initialized = false;			\/\/ If the SPI interface has been initialized via SPI_init();$/;"	v	typeref:typename:bool
SPI_misaligned_bits	SPI.c	/^size_t	SPI_misaligned_bits(byte b, bool sleeping_bit) {$/;"	f	typeref:typename:size_t
SPI_queue	SPI.c	/^bool	SPI_queue(byte b)$/;"	f	typeref:typename:bool
SPI_queue_byte	SPI.c	/^bool	SPI_queue_byte(byte b, bool discard)$/;"	f	typeref:typename:bool
SPI_read	SPI.c	/^bool	SPI_read(size_t bytes, byte dummy)$/;"	f	typeref:typename:bool
SPI_send	SPI.c	/^void	SPI_send(void)$/;"	f	typeref:typename:void
SPI_sending	SPI.c	/^bool	SPI_sending(void) {$/;"	f	typeref:typename:bool
SPI_slave_select	SPI.c	/^void	SPI_slave_select(byte slave)$/;"	f	typeref:typename:void
SPI_started	SPI.c	/^bool	SPI_started(void)$/;"	f	typeref:typename:bool
SUBPROJECTS	nbproject/Makefile-impl.mk	/^SUBPROJECTS=${SUB_${SUB}}$/;"	m
SUB_IMAGE_ADDRESS_COMMAND	nbproject/Makefile-default.mk	/^SUB_IMAGE_ADDRESS_COMMAND=$/;"	m
SUB_no	nbproject/Makefile-impl.mk	/^SUB_no=NO$/;"	m
SYSCLOCK	types.h	/^#define SYSCLOCK	/;"	d
ShiftRegisterClock_LAT	shiftreg.h	/^#define ShiftRegisterClock_LAT /;"	d
ShiftRegisterClock_TRIS	shiftreg.h	/^#define ShiftRegisterClock_TRIS /;"	d
ShiftRegisterData_LAT	shiftreg.h	/^#define ShiftRegisterData_LAT /;"	d
ShiftRegisterData_TRIS	shiftreg.h	/^#define ShiftRegisterData_TRIS /;"	d
ShiftRegisterLatch_LAT	shiftreg.h	/^#define ShiftRegisterLatch_LAT /;"	d
ShiftRegisterLatch_TRIS	shiftreg.h	/^#define ShiftRegisterLatch_TRIS /;"	d
TYPES_H	types.h	/^#define	TYPES_H$/;"	d
UART_BUFF_SIZE	UART.c	/^#define UART_BUFF_SIZE	/;"	d	file:
UART_H	UART.h	/^#define	UART_H$/;"	d
UART_RX	UART.c	/^byte	UART_RX[UART_BUFF_SIZE];	\/\/ Incoming SPI data buffer$/;"	v	typeref:typename:byte[]
UART_RX_i	UART.c	/^size_t	UART_RX_i = 0;				\/\/ Internal index for the Incoming SPI data buffer$/;"	v	typeref:typename:size_t
UART_RX_size	UART.c	/^size_t	UART_RX_size = 0;			\/\/ Allocated bytes in the Outgoing SPI data buffer$/;"	v	typeref:typename:size_t
UART_available	UART.c	/^size_t UART_available(void)$/;"	f	typeref:typename:size_t
UART_init	UART.c	/^void UART_init(unsigned int baud_rate)$/;"	f	typeref:typename:void
UART_read	UART.c	/^bool UART_read(byte *b)$/;"	f	typeref:typename:bool
UART_send	UART.c	/^void UART_send(byte c)$/;"	f	typeref:typename:void
UART_send_str	UART.c	/^void UART_send_str(byte *str)$/;"	f	typeref:typename:void
UART_wait_response	UART.c	/^void UART_wait_response(size_t sz)$/;"	f	typeref:typename:void
UI_H	UI.h	/^#define	UI_H$/;"	d
UI_LIST	UI.h	/^#define UI_LIST /;"	d
UI_LIST_MAX_SZ	UI.h	/^#define UI_LIST_MAX_SZ /;"	d
UI_MSG	UI.h	/^#define UI_MSG /;"	d
UI_NONE	UI.h	/^#define UI_NONE /;"	d
UI_list	UI.c	/^char UI_list[UI_LIST_MAX_SZ][50];$/;"	v	typeref:typename:char[][50]
UI_list_clear	UI.c	/^void	UI_list_clear(void) {$/;"	f	typeref:typename:void
UI_list_scroll	UI.c	/^uint8_t	UI_list_scroll = 0;$/;"	v	typeref:typename:uint8_t
UI_list_set	UI.c	/^void	UI_list_set(size_t i, char *str) {$/;"	f	typeref:typename:void
UI_list_size	UI.c	/^size_t UI_list_size = 0;$/;"	v	typeref:typename:size_t
UI_list_start	UI.c	/^void	UI_list_start(void) {$/;"	f	typeref:typename:void
UI_mode	UI.c	/^bool UI_mode = UI_NONE;$/;"	v	typeref:typename:bool
UI_needs_repaint	UI.c	/^bool UI_needs_repaint = true;$/;"	v	typeref:typename:bool
UI_paint_list	UI.c	/^void	UI_paint_list(void)$/;"	f	typeref:typename:void
UI_repaint	UI.c	/^void	UI_repaint(void) {$/;"	f	typeref:typename:void
UI_scroll	UI.c	/^void	UI_scroll(byte dir)$/;"	f	typeref:typename:void
UP	types.h	/^#define UP	/;"	d
WHEEL_H	wheel.h	/^#define WHEEL_H$/;"	d
WHEEL_L_PORT	wheel.h	/^#define WHEEL_L_PORT /;"	d
WHEEL_L_TRIS	wheel.h	/^#define WHEEL_L_TRIS /;"	d
WHEEL_NONE	wheel.h	/^#define WHEEL_NONE	/;"	d
WHEEL_PRESS	wheel.h	/^#define WHEEL_PRESS	/;"	d
WHEEL_P_PORT	wheel.h	/^#define WHEEL_P_PORT /;"	d
WHEEL_P_TRIS	wheel.h	/^#define WHEEL_P_TRIS /;"	d
WHEEL_R_PORT	wheel.h	/^#define WHEEL_R_PORT /;"	d
WHEEL_R_TRIS	wheel.h	/^#define WHEEL_R_TRIS /;"	d
WHEEL_TURN_LEFT	wheel.h	/^#define WHEEL_TURN_LEFT	/;"	d
WHEEL_TURN_RIGHT	wheel.h	/^#define WHEEL_TURN_RIGHT	/;"	d
WHITE	screen.h	/^#define	WHITE	/;"	d
WIFI_BUS_ERR	wifi.h	/^#define WIFI_BUS_ERR /;"	d
WIFI_ERR	wifi.h	/^#define WIFI_ERR /;"	d
WIFI_H	wifi.h	/^#define	WIFI_H$/;"	d
WIFI_OK	wifi.h	/^#define WIFI_OK /;"	d
WIFI_PASS_LEN	settings.h	/^#define WIFI_PASS_LEN /;"	d
WIFI_TCP	wifi.h	/^#define WIFI_TCP	/;"	d
WIFI_UDP	wifi.h	/^#define WIFI_UDP	/;"	d
__ISR	SPI.c	/^void    __ISR (_SPI_2_VECTOR, IPL7SRS) SPI(void) {$/;"	f	typeref:typename:void
__ISR	UART.c	/^void    __ISR (_UART_1_VECTOR, IPL7SRS) UART(void) {$/;"	f	typeref:typename:void
__ISR	delay.c	/^void    __ISR (_TIMER_1_VECTOR, IPL7SRS) T1_Interrupt(void)$/;"	f	typeref:typename:void
all	Makefile	/^all: .all-post$/;"	t
attributes	FAT32.h	/^   byte         attributes;$/;"	m	struct:file_s	typeref:typename:byte
build	Makefile	/^build: .build-post$/;"	t
buzz_on	delay.c	/^bool		buzz_on;$/;"	v	typeref:typename:bool
buzz_on	main.c	/^bool		buzz_on;$/;"	v	typeref:typename:bool
byte	types.h	/^typedef unsigned char byte;$/;"	t	typeref:typename:unsigned char
checkReturnCode	nbproject/Package-default.bash	/^function checkReturnCode$/;"	f
clean	Makefile	/^clean: .clean-post$/;"	t
clobber	Makefile	/^clobber: .clobber-post$/;"	t
cluster	FAT32.h	/^   unsigned int cluster;$/;"	m	struct:file_s	typeref:typename:unsigned int
com-microchip-mplab-nbide-embedded-makeproject-MakeProject.md5	nbproject/Makefile-genesis.properties	/^com-microchip-mplab-nbide-embedded-makeproject-MakeProject.md5=3c333ba33c51ccc254bb69f65f4fff20$/;"	k
conf.ids	nbproject/Makefile-genesis.properties	/^conf.ids=default$/;"	k
configurations-xml	nbproject/Makefile-genesis.properties	/^configurations-xml=e174d5e2b90a92667632f7ac1742df9f$/;"	k
convert_arr_to_long	convert.c	/^unsigned long convert_arr_to_long(byte* arr)$/;"	f	typeref:typename:unsigned long
convert_long_to_arr	convert.c	/^byte* convert_long_to_arr(unsigned long val)$/;"	f	typeref:typename:byte *
convert_ret	convert.c	/^byte convert_ret[4];$/;"	v	typeref:typename:byte[4]
copyFileToTmpDir	nbproject/Package-default.bash	/^function copyFileToTmpDir$/;"	f
cursor	FAT32.h	/^   unsigned int cursor;$/;"	m	struct:file_s	typeref:typename:unsigned int
cursor_sector	FAT32.h	/^   unsigned int cursor_sector;$/;"	m	struct:file_s	typeref:typename:unsigned int
default.com-microchip-mplab-nbide-toolchainXC32-XC32LanguageToolchain.md5	nbproject/Makefile-genesis.properties	/^default.com-microchip-mplab-nbide-toolchainXC32-XC32LanguageToolchain.md5=3976384a3210002020dbcd/;"	k
default.languagetoolchain.dir	nbproject/Makefile-genesis.properties	/^default.languagetoolchain.dir=\/Applications\/microchip\/xc32\/v2.10\/bin$/;"	k
default.languagetoolchain.version	nbproject/Makefile-genesis.properties	/^default.languagetoolchain.version=2.10$/;"	k
delay_init	delay.c	/^void	delay_init()$/;"	f	typeref:typename:void
delay_ms	delay.c	/^void	delay_ms(uint32_t ms)$/;"	f	typeref:typename:void
delay_us	delay.c	/^void	delay_us(uint32_t us)$/;"	f	typeref:typename:void
dist/${CND_CONF}/${IMAGE_TYPE}/pop.X.${IMAGE_TYPE}.${OUTPUT_SUFFIX}	nbproject/Makefile-default.mk	/^dist\/${CND_CONF}\/${IMAGE_TYPE}\/pop.X.${IMAGE_TYPE}.${OUTPUT_SUFFIX}: ${OBJECTFILES}  nbprojec/;"	t
false	types.h	/^#define false /;"	d
file_s	FAT32.h	/^typedef struct  file_s$/;"	s
file_t	FAT32.h	/^}               file_t;$/;"	t	typeref:struct:file_s
flag	list.h	/^	byte   flag;$/;"	m	struct:listItem	typeref:typename:byte
freq	delay.c	/^uint32_t	freq;$/;"	v	typeref:typename:uint32_t
freq	main.c	/^uint32_t	freq;$/;"	v	typeref:typename:uint32_t
guess	wheel.c	/^volatile byte	guess = WHEEL_NONE;$/;"	v	typeref:typename:volatile byte
help	Makefile	/^help: .help-post$/;"	t
host.platform	nbproject/Makefile-genesis.properties	/^host.platform=mac$/;"	k
id	list.h	/^	size_t id;$/;"	m	struct:listItem	typeref:typename:size_t
init	main.c	/^void init(void)$/;"	f	typeref:typename:void
led_init	led.c	/^void led_init(void)$/;"	f	typeref:typename:void
led_set	led.c	/^void led_set(char status)$/;"	f	typeref:typename:void
listItem	list.h	/^struct listItem$/;"	s
list_add_item	list.c	/^bool list_add_item(struct listItem item)$/;"	f	typeref:typename:bool
list_clear	list.c	/^bool list_clear(void)$/;"	f	typeref:typename:bool
list_get_item	list.c	/^bool list_get_item(size_t index, struct listItem* item)$/;"	f	typeref:typename:bool
list_set_item	list.c	/^bool list_set_item(size_t index, struct listItem item)$/;"	f	typeref:typename:bool
main	main.c	/^void main(void)$/;"	f	typeref:typename:void
makeDirectory	nbproject/Package-default.bash	/^function makeDirectory$/;"	f
mdbDebugger/LAST_HW_BP_RESOURCE_WARN	nbproject/private/SuppressibleMessageMemo.properties	/^mdbDebugger\/LAST_HW_BP_RESOURCE_WARN=true$/;"	k
mdbDebugger/NO_HW_BP_RESOURCES_WARN	nbproject/private/SuppressibleMessageMemo.properties	/^mdbDebugger\/NO_HW_BP_RESOURCES_WARN=true$/;"	k
name	list.h	/^	char   name[50];$/;"	m	struct:listItem	typeref:typename:char[50]
note_len	delay.c	/^uint16_t	note_len;$/;"	v	typeref:typename:uint16_t
note_len	main.c	/^uint16_t	note_len;$/;"	v	typeref:typename:uint16_t
play_note	piezo.c	/^void	play_note(uint16_t freq, uint16_t len)$/;"	f	typeref:typename:void
settings_get_setting	settings.c	/^bool settings_get_setting(size_t offset, size_t size, byte* val)$/;"	f	typeref:typename:bool
settings_get_wifi_credentials	settings.c	/^bool settings_get_wifi_credentials(void)$/;"	f	typeref:typename:bool
settings_set_setting	settings.c	/^bool settings_set_setting(size_t offset, size_t size, byte* val)$/;"	f	typeref:typename:bool
shiftreg_init	shiftreg.c	/^void shiftreg_init(void)$/;"	f	typeref:typename:void
shiftreg_set	shiftreg.c	/^void shiftreg_set(byte pin, bool level)$/;"	f	typeref:typename:void
shiftreg_value	shiftreg.c	/^byte shiftreg_value;$/;"	v	typeref:typename:byte
shiftreg_write	shiftreg.c	/^void shiftreg_write(byte val)$/;"	f	typeref:typename:void
size	FAT32.h	/^   unsigned int size;$/;"	m	struct:file_s	typeref:typename:unsigned int
slp	delay.c	/^uint16_t	slp = 0;$/;"	v	typeref:typename:uint16_t
stop_note	piezo.c	/^void	stop_note(void)$/;"	f	typeref:typename:void
true	types.h	/^#define true /;"	d
wheel_event	wheel.c	/^byte wheel_event(void)$/;"	f	typeref:typename:byte
wheel_init	wheel.c	/^void wheel_init(void)$/;"	f	typeref:typename:void
wheel_l_slp	wheel.c	/^bool			wheel_l_slp = false;$/;"	v	typeref:typename:bool
wheel_r_slp	wheel.c	/^bool			wheel_r_slp = false;$/;"	v	typeref:typename:bool
wifi_connect	wifi.c	/^bool wifi_connect(char *ssid, char *pass)$/;"	f	typeref:typename:bool
wifi_flush_uart	wifi.c	/^void wifi_flush_uart(void)$/;"	f	typeref:typename:void
wifi_init	wifi.c	/^bool wifi_init(void)$/;"	f	typeref:typename:bool
wifi_load_response	wifi.c	/^char *wifi_load_response(void)$/;"	f	typeref:typename:char *
wifi_order	wifi.c	/^bool wifi_order(unsigned long id)$/;"	f	typeref:typename:bool
wifi_pass	settings.h	/^char	wifi_pass[WIFI_PASS_LEN];$/;"	v	typeref:typename:char[]
wifi_prepare	wifi.c	/^bool wifi_prepare(void)$/;"	f	typeref:typename:bool
wifi_response	wifi.c	/^char wifi_response[100];$/;"	v	typeref:typename:char[100]
wifi_ssid	settings.h	/^char	wifi_ssid[WIFI_PASS_LEN];$/;"	v	typeref:typename:char[]
wifi_update	wifi.c	/^bool wifi_update(void)$/;"	f	typeref:typename:bool
